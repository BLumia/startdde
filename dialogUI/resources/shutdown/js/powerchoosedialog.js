// Generated by CoffeeScript 1.6.3
(function() {
  var Background, ConfirmDialog, DEEPIN_ITEM_ID, DOWN_ARROW, ENTER_KEY, ESC_KEY, LEFT_ARROW, Module, PowerChoose, RIGHT_ARROW, SPACE_KEY, UP_ARROW, Widget, ajax, apply_animation, apply_flash, apply_refuse_rotate, apply_rotate, array_sort_min2max, assert, background, bindtextdomain, build_menu, calc_text_size, clamp, confirm_ok, confirmdialog, create_element, create_img, destory_all, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, echo, find_drag_target, frame_click, get_function_name, get_page_xy, get_path_base, get_path_name, inject_css, inject_js, message_text, option, option_text, option_text_force, power_can, power_force, power_request, powerchoose, remove_element, run_post, sortNumber, swap_element, timeId, _, _events,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  String.prototype.args = function() {
    var i, len, o, _i;
    o = this;
    len = arguments.length;
    for (i = _i = 1; 1 <= len ? _i <= len : _i >= len; i = 1 <= len ? ++_i : --_i) {
      o = o.replace(new RegExp("%" + i, "g"), "" + arguments[i - 1]);
    }
    return o;
  };

  String.prototype.addSlashes = function() {
    return this.replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
  };

  Array.prototype.remove = function(el) {
    var i;
    i = this.indexOf(el);
    if (i !== -1) {
      return this.splice(this.indexOf(el), 1)[0];
    }
  };

  echo = function(log) {
    return console.log(log);
  };

  assert = function(value, msg) {
    if (!value) {
      throw new Error(msg);
    }
  };

  _ = function(s, d) {
    if (d) {
      return DCore.dgettext(d, s);
    } else {
      return DCore.gettext(s);
    }
  };

  bindtextdomain = function(domain, locale_dir) {
    return DCore.bindtextdomain(domain, locale_dir);
  };

  build_menu = function(info) {
    var count, i, item, len, menu, submenu, v, _i;
    len = info.length;
    if (len < 2) {
      return null;
    }
    count = 10000;
    menu = new Menu(info[0]);
    for (i = _i = 1; 1 <= len ? _i < len : _i > len; i = 1 <= len ? ++_i : --_i) {
      v = info[i];
      if (v.length === 0) {
        menu.addSeparator();
      } else if (typeof v[0] === "number") {
        item = new MenuItem(v[0], v[1]);
        if (v[2] != null) {
          item.setActive(v[2]);
        }
        menu.append(item);
      } else {
        echo("submenu");
        submenu = build_menu(v[1]);
        menu.append(new MenuItem(count, v[1]).setSubMenu(build_menu(v[1])));
        count += 1;
      }
    }
    return menu;
  };

  get_page_xy = function(el, x, y) {
    var p;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return p = webkitConvertPointFromNodeToPage(el, new WebKitPoint(x, y));
  };

  find_drag_target = function(el) {
    var p;
    p = el;
    if (p.draggable) {
      return p;
    }
    while (p = p.parentNode) {
      if (p.draggable) {
        return p;
      }
    }
    return null;
  };

  swap_element = function(c1, c2) {
    var tmp;
    if (c1.parentNode === c2.parentNode) {
      tmp = document.createElement('div');
      c1.parentNode.insertBefore(tmp, c1);
      c2.parentNode.insertBefore(c1, c2);
      tmp.parentNode.insertBefore(c2, tmp);
      return tmp.parentNode.removeChild(tmp);
    }
  };

  document.body.ondrop = function(e) {
    return e.preventDefault();
  };

  run_post = function(f, self) {
    var f2;
    f2 = f.bind(self || this);
    return setTimeout(f2, 0);
  };

  create_element = function(type, clss, parent) {
    var el;
    el = document.createElement(type);
    if (clss) {
      el.setAttribute("class", clss);
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };

  create_img = function(clss, src, parent) {
    var el;
    el = create_element('img', clss, parent);
    el.src = src;
    el.draggable = false;
    return el;
  };

  calc_text_size = function(txt, width) {
    var h, tmp;
    tmp = create_element('div', 'hidden_calc_text', document.body);
    tmp.innerText = txt;
    tmp.style.width = "" + width + "px";
    h = tmp.clientHeight;
    document.body.removeChild(tmp);
    return h;
  };

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  get_function_name = function() {
    if (!arguments.caller) {
      return "AnymouseFunction";
    }
    return /function (.*?)\(/.exec(arguments.caller.toString())[1];
  };

  DEEPIN_ITEM_ID = "deepin-item-id";

  dnd_is_desktop = function(e) {
    return e.dataTransfer.getData("text/uri-list").trim().endsWith(".desktop");
  };

  dnd_is_deepin_item = function(e) {
    if (e.dataTransfer.getData(DEEPIN_ITEM_ID)) {
      return true;
    } else {
      return false;
    }
  };

  dnd_is_file = function(e) {
    return e.dataTransfer.getData("text/uri-list").length !== 0;
  };

  ajax = function(url, sync, callback, callback_error) {
    var xhr;
    if (sync == null) {
      sync = true;
    }
    xhr = new XMLHttpRequest();
    xhr.open("GET", url, sync);
    xhr.onload = function() {
      echo("XMLHttpRequest onload");
      if (typeof callback === "function") {
        callback(xhr);
      }
    };
    xhr.onerror = function() {
      echo("XMLHttpRequest onerror");
      return typeof callback_error === "function" ? callback_error(xhr) : void 0;
    };
    return xhr.send(null);
  };

  get_path_base = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  get_path_name = function(path) {
    var dot_pos;
    dot_pos = path.lastIndexOf('.');
    if (dot_pos === -1) {
      return path.substring(path.lastIndexOf('/') + 1);
    } else {
      return path.substring(path.lastIndexOf('/') + 1, dot_pos);
    }
  };

  remove_element = function(obj) {
    var _parentElement;
    _parentElement = obj != null ? obj.parentNode : void 0;
    return _parentElement != null ? _parentElement.removeChild(obj) : void 0;
  };

  sortNumber = function(a, b) {
    return a - b;
  };

  array_sort_min2max = function(arr) {
    return arr.sort(sortNumber);
  };

  inject_js = function(src) {
    var js_element;
    js_element = create_element("script", null, document.body);
    return js_element.src = src;
  };

  inject_css = function(el, src) {
    var css_element;
    css_element = create_element('link', null, el);
    css_element.rel = "stylesheet";
    return css_element.href = src;
  };

  ESC_KEY = 27;

  SPACE_KEY = 32;

  ENTER_KEY = 13;

  LEFT_ARROW = 37;

  RIGHT_ARROW = 39;

  UP_ARROW = 38;

  DOWN_ARROW = 40;

  apply_animation = function(el, name, duration, timefunc) {
    el.style.webkitAnimationName = name;
    el.style.webkitAnimationDuration = duration;
    return el.style.webkitAnimationTimingFunction = timefunc || "linear";
  };

  apply_rotate = function(el, time) {
    var id;
    apply_animation(el, "rotate", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_flash = function(el, time) {
    var id;
    apply_animation(el, "flash", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_refuse_rotate = function(el, time) {
    apply_animation(el, "refuse", "" + time + "s", "linear");
    return setTimeout(function() {
      return el.style.webkitAnimation = "";
    }, time * 1000);
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, value, _ref;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, value, _ref, _ref1;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return (_ref1 = obj.__init__) != null ? _ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  _events = ['blur', 'change', 'click', 'contextmenu', 'buildmenu', 'rightclick', 'copy', 'cut', 'dblclick', 'error', 'focus', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'paste', 'reset', 'resize', 'scroll', 'select', 'submit', 'DOMActivate', 'DOMAttrModified', 'DOMCharacterDataModified', 'DOMFocusIn', 'DOMFocusOut', 'DOMMouseScroll', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMSubtreeModified', 'textInput', 'dragstart', 'dragend', 'dragover', 'drag', 'drop', 'dragenter', 'dragleave', 'itemselected', 'webkitTransitionEnd'];

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.object_table = {};

    Widget.look_up = function(id) {
      return this.object_table[id];
    };

    function Widget() {
      var el, f_menu, f_rclick, k, key, v, _ref,
        _this = this;
      el = document.createElement('div');
      el.setAttribute('class', this.constructor.name);
      if (this.id) {
        el.id = this.id;
        Widget.object_table[this.id] = this;
      }
      this.element = el;
      f_menu = null;
      f_rclick = null;
      _ref = this.constructor.prototype;
      for (k in _ref) {
        v = _ref[k];
        if (!(k.search("do_") === 0)) {
          continue;
        }
        key = k.substr(3);
        if (__indexOf.call(_events, key) >= 0) {
          if (key === "rightclick") {
            f_rclick = v.bind(this);
          } else if (key === "buildmenu") {
            f_menu = v.bind(this);
          } else if (key === "contextmenu") {
            "nothing should do";
          } else {
            this.element.addEventListener(key, v.bind(this));
          }
        } else {
          echo("found the do_ prefix but the name " + key + " is not an dom events");
        }
      }
      this.element.addEventListener("contextmenu", function(e) {
        var menu, _ref1;
        if (f_rclick) {
          f_rclick(e);
        }
        if (f_menu) {
          menu = f_menu();
          menu.unshift(DEEPIN_MENU_TYPE.NORMAL);
          if ((_ref1 = build_menu(menu)) != null) {
            _ref1.addListener(_this.on_itemselected).showMenu(e.clientX, e.clientY);
          }
          return e.preventDefault();
        }
      });
    }

    Widget.prototype.destroy = function() {
      var _ref;
      if ((_ref = this.element.parentElement) != null) {
        _ref.removeChild(this.element);
      }
      return delete Widget.object_table[this.id];
    };

    Widget.prototype.add_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.add(name);
    };

    Widget.prototype.remove_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.remove(name);
    };

    return Widget;

  })(Module);

  Background = (function(_super) {
    var Dbus_Account, is_greeter, users_id, users_name, users_path;

    __extends(Background, _super);

    Dbus_Account = null;

    users_path = [];

    users_name = [];

    users_id = [];

    is_greeter = false;

    function Background() {
      var error;
      Background.__super__.constructor.apply(this, arguments);
      Dbus_Account = DCore.DBus.sys("org.freedesktop.Accounts");
      try {
        DCore.Greeter.get_date();
        is_greeter = true;
      } catch (_error) {
        error = _error;
        is_greeter = false;
      }
    }

    Background.prototype.get_all_users = function() {
      var id, name, path, user_dbus, _i, _len;
      if (is_greeter) {
        users_name = DCore.Greeter.get_users();
      } else {
        users_path = Dbus_Account.ListCachedUsers_sync();
        for (_i = 0, _len = users_path.length; _i < _len; _i++) {
          path = users_path[_i];
          user_dbus = DCore.DBus.sys_object("org.freedesktop.Accounts", path, "org.freedesktop.Accounts.User");
          name = user_dbus.UserName;
          id = user_dbus.Uid;
          users_name.push(name);
          users_id.push(id);
        }
      }
      return users_name;
    };

    Background.prototype.get_default_username = function() {
      var e, _default_username;
      if (is_greeter) {
        _default_username = DCore.Greeter.get_default_user();
      } else {
        try {
          _default_username = DCore.Lock.get_username();
        } catch (_error) {
          e = _error;
          _default_username = DCore.Shutdown.get_username();
        }
      }
      return _default_username;
    };

    Background.prototype.get_user_id = function(user) {
      var id, j, tmp, _i, _len;
      if (users_id.length === 0 || users_name.length === 0) {
        this.get_all_users();
      }
      id = null;
      for (j = _i = 0, _len = users_name.length; _i < _len; j = ++_i) {
        tmp = users_name[j];
        if (user === tmp) {
          id = users_id[j];
        }
      }
      if (id == null) {
        id = users_id[0];
      }
      if (id == null) {
        id = "1000";
      }
      return id;
    };

    Background.prototype.set_blur_background = function(user) {
      var BackgroundBlurPictPath, Dbus_Account_deepin, e, path, userid;
      BackgroundBlurPictPath = null;
      if (BackgroundBlurPictPath == null) {
        userid = new String();
        userid = this.get_user_id(user);
        echo("current user " + user + "'s userid:" + userid);
        Dbus_Account_deepin = DCore.DBus.sys("com.deepin.dde.api.Accounts");
        path = Dbus_Account_deepin.BackgroundBlurPictPath_sync(userid.toString(), "");
        if (path[0]) {
          BackgroundBlurPictPath = path[1];
        } else {
          BackgroundBlurPictPath = path[1];
        }
      }
      echo("BackgroundBlurPictPath:" + BackgroundBlurPictPath);
      localStorage.setItem("BackgroundBlurPictPath", BackgroundBlurPictPath);
      if (!is_greeter) {
        try {
          return document.body.style.backgroundImage = "url(" + BackgroundBlurPictPath + ")";
        } catch (_error) {
          e = _error;
          echo(e);
          return document.body.style.backgroundImage = "url(/usr/share/backgrounds/default_background.jpg)";
        }
      }
    };

    Background.prototype.set_current_user_blur_background = function() {
      var current_user;
      current_user = this.get_default_username();
      return this.set_blur_background(current_user);
    };

    return Background;

  })(Widget);

  power_request = function(power) {
    var dbus_power;
    document.body.style.cursor = "wait";
    dbus_power = DCore.DBus.session("com.deepin.daemon.ShutdownManager");
    echo("Warning: The system will request ----" + power + "----");
    switch (power) {
      case "lock":
        return dbus_power.RequestLock();
      case "suspend":
        return dbus_power.RequestSuspend();
      case "logout":
        return dbus_power.RequestLogout();
      case "restart":
        return dbus_power.RequestReboot();
      case "shutdown":
        return dbus_power.RequestShutdown();
    }
  };

  power_can = function(power) {
    var dbus_power, result;
    result = true;
    dbus_power = DCore.DBus.session("com.deepin.daemon.ShutdownManager");
    switch (power) {
      case "lock":
        result = true;
        break;
      case "suspend":
        result = dbus_power.CanSuspend_sync();
        break;
      case "logout":
        result = dbus_power.CanLogout_sync();
        break;
      case "restart":
        result = dbus_power.CanReboot_sync();
        break;
      case "shutdown":
        result = dbus_power.CanShutdown_sync();
        break;
      default:
        result = false;
    }
    echo("power_can : -----------Can_" + power + " :" + result + "------------");
    if (result === void 0) {
      result = true;
    }
    return result;
  };

  power_force = function(power) {
    var dbus_power;
    document.body.style.cursor = "wait";
    echo("Warning: The system will ----" + power + "---- Force!!");
    dbus_power = DCore.DBus.session("com.deepin.daemon.ShutdownManager");
    switch (power) {
      case "lock":
        return dbus_power.RequestLock();
      case "suspend":
        return dbus_power.RequestSuspend();
      case "logout":
        return dbus_power.ForceLogout();
      case "restart":
        return dbus_power.ForceReboot();
      case "shutdown":
        return dbus_power.ForceShutdown();
    }
  };

  confirmdialog = null;

  powerchoose = null;

  frame_click = false;

  option = ["lock", "suspend", "logout", "restart", "shutdown"];

  option_text = [_("Lock"), _("Suspend"), _("Log out"), _("Restart"), _("Shut down")];

  option_text_force = [_("Lock"), _("Suspend"), _("Force Log out"), _("Force Restart"), _("Force Shut down")];

  message_text = [_("The system will be locked in %1 seconds."), _("The system will be suspended in %1 seconds."), _("You will be automatically logged out in %1 seconds."), _("The system will restart in %1 seconds."), _("The system will shut down in %1 seconds.")];

  timeId = null;

  destory_all = function() {
    if (timeId) {
      clearInterval(timeId);
    }
    return DCore.Shutdown.quit();
  };

  confirm_ok = function(power) {
    echo("--------------confirm_ok(" + power + ")-------------");
    switch (power) {
      case "lock":
        destory_all();
        break;
      case "suspend":
        destory_all();
    }
    if (power_can(power) && timeId === 0) {
      power_request(power);
    } else {
      power_force(power);
    }
    if (timeId) {
      return clearInterval(timeId);
    }
  };

  document.body.style.height = window.innerHeight;

  document.body.style.width = window.innerWidth;

  background = new Background();

  background.set_current_user_blur_background();

  ConfirmDialog = (function(_super) {
    var CANCEL, OK, choose_num;

    __extends(ConfirmDialog, _super);

    timeId = null;

    CANCEL = 0;

    OK = 1;

    choose_num = OK;

    function ConfirmDialog(opt) {
      var i, j, tmp, _i, _len;
      ConfirmDialog.__super__.constructor.apply(this, arguments);
      i = null;
      this.opt = opt;
      for (j = _i = 0, _len = option.length; _i < _len; j = ++_i) {
        tmp = option[j];
        if (tmp === opt) {
          i = j;
        }
      }
      if (i === null) {
        echo("no this power option!");
        return;
      }
      if (i < 2 || i > 4) {
        return;
      }
      this.i = i;
      powerchoose = null;
    }

    ConfirmDialog.prototype.destory = function() {
      return document.body.removeChild(this.element);
    };

    ConfirmDialog.prototype.frame_build = function() {
      var button_confirm, frame_confirm, i, left, right,
        _this = this;
      i = this.i;
      frame_confirm = create_element("div", "frame_confirm", this.element);
      frame_confirm.addEventListener("click", function() {
        return frame_click = true;
      });
      left = create_element("div", "left", frame_confirm);
      this.img_confirm = create_img("img_confirm", "img/normal/" + option[i] + ".png", left);
      right = create_element("div", "right", frame_confirm);
      this.message_confirm = create_element("div", "message_confirm", right);
      button_confirm = create_element("div", "button_confirm", right);
      this.button_cancel = create_element("div", "button_cancel", button_confirm);
      this.button_cancel.textContent = _("Cancel");
      this.button_ok = create_element("div", "button_ok", button_confirm);
      echo("----------------power_can check-------------");
      if (power_can(this.opt)) {
        this.style_for_direct();
      } else {
        this.style_for_force();
      }
      this.button_cancel.addEventListener("click", function() {
        echo("button_cancel click");
        return destory_all();
      });
      this.button_ok.addEventListener("click", function() {
        echo("button_ok click");
        return confirm_ok(option[i]);
      });
      this.button_cancel.addEventListener("mouseover", function() {
        choose_num = CANCEL;
        return _this.hover_state(choose_num);
      });
      this.button_cancel.addEventListener("mouseout", function() {
        return _this.normal_state(CANCEL);
      });
      this.button_ok.addEventListener("mouseover", function() {
        choose_num = OK;
        return _this.hover_state(choose_num);
      });
      this.button_ok.addEventListener("mouseout", function() {
        return _this.normal_state(OK);
      });
      apply_animation(right, "show_confirm", "0.3s");
      return right.addEventListener("webkitAnimationEnd", function() {
        return right.style.opacity = "1.0";
      }, false);
    };

    ConfirmDialog.prototype.style_for_direct = function() {
      var i;
      echo("style_for_direct:power_can true!");
      i = this.i;
      this.img_confirm.src = "img/normal/" + option[i] + ".png";
      this.message_confirm.textContent = message_text[i].args(60);
      return this.button_ok.textContent = option_text[i];
    };

    ConfirmDialog.prototype.style_for_force = function() {
      var i;
      echo("style_for_force:power_can false!");
      i = this.i;
      this.img_confirm.src = "img/normal/" + option[i] + ".png";
      this.message_confirm.textContent = message_text[i].args(60);
      this.button_ok.textContent = option_text_force[i];
      return this.button_ok.style.color = "rgba(255,128,114,1.0)";
    };

    ConfirmDialog.prototype.interval = function(time) {
      var i, that;
      i = this.i;
      that = this;
      if (timeId) {
        clearInterval(timeId);
      }
      return timeId = setInterval(function() {
        time--;
        that.message_confirm.textContent = message_text[i].args(time);
        if (time === 0) {
          clearInterval(timeId);
          if ((2 <= i && i <= 4)) {
            return confirm_ok(option[i]);
          }
        }
      }, 1000);
    };

    ConfirmDialog.prototype.hover_state = function(choose_num) {
      switch (choose_num) {
        case OK:
          this.button_ok.style.color = "rgba(0,193,255,1.0)";
          return this.button_cancel.style.color = "rgba(255,255,255,0.5)";
        case CANCEL:
          this.button_cancel.style.color = "rgba(0,193,255,1.0)";
          return this.button_ok.style.color = "rgba(255,255,255,0.5)";
      }
    };

    ConfirmDialog.prototype.normal_state = function(choose_num) {
      switch (choose_num) {
        case OK:
          this.button_ok.style.color = "rgba(255,255,255,0.5)";
          return this.button_cancel.style.color = "rgba(255,255,255,0.5)";
        case CANCEL:
          this.button_cancel.style.color = "rgba(255,255,255,0.5)";
          return this.button_ok.style.color = "rgba(255,255,255,0.5)";
      }
    };

    ConfirmDialog.prototype.keydown = function(keyCode) {
      var change_choose, choose_enter,
        _this = this;
      change_choose = function() {
        if (choose_num === OK) {
          choose_num = CANCEL;
        } else {
          choose_num = OK;
        }
        return choose_num;
      };
      choose_enter = function() {
        var i;
        i = _this.i;
        switch (choose_num) {
          case OK:
            if ((2 <= i && i <= 4)) {
              return confirm_ok(option[i]);
            }
            break;
          case CANCEL:
            return destory_all();
        }
      };
      switch (keyCode) {
        case LEFT_ARROW:
          change_choose();
          return this.hover_state(choose_num);
        case RIGHT_ARROW:
          change_choose();
          return this.hover_state(choose_num);
        case ENTER_KEY:
          return choose_enter();
        case ESC_KEY:
          return destory_all();
      }
    };

    return ConfirmDialog;

  })(Widget);

  PowerChoose = (function(_super) {
    var choose_num, img_url, opt, opt_img, opt_text, select_state_confirm;

    __extends(PowerChoose, _super);

    opt = [];

    img_url = [];

    opt_img = [];

    opt_text = [];

    choose_num = -1;

    select_state_confirm = false;

    function PowerChoose() {
      PowerChoose.__super__.constructor.apply(this, arguments);
      confirmdialog = null;
    }

    PowerChoose.prototype.destory = function() {
      return document.body.removeChild(this.element);
    };

    PowerChoose.prototype.frame_build = function() {
      var button, frame, i, that, tmp, _i, _len, _results;
      frame = create_element("div", "frame", this.element);
      button = create_element("div", "button", frame);
      frame.addEventListener("click", function() {
        return frame_click = true;
      });
      _results = [];
      for (i = _i = 0, _len = option.length; _i < _len; i = ++_i) {
        tmp = option[i];
        opt[i] = create_element("div", "opt", button);
        opt[i].style.backgroundColor = "rgba(255,255,255,0.0)";
        opt[i].style.border = "1px solid rgba(255,255,255,0.0)";
        opt[i].value = i;
        img_url[i] = "img/normal/" + option[i] + ".png";
        opt_img[i] = create_img("opt_img", img_url[i], opt[i]);
        opt_text[i] = create_element("div", "opt_text", opt[i]);
        opt_text[i].textContent = option_text[i];
        that = this;
        opt[i].addEventListener("mouseover", function() {
          i = this.value;
          choose_num = i;
          return that.hover_state(i);
        });
        opt[i].addEventListener("mouseout", function() {
          i = this.value;
          return opt_img[i].src = "img/normal/" + option[i] + ".png";
        });
        opt[i].addEventListener("mousedown", function() {
          i = this.value;
          return opt_img[i].src = "img/click/" + option[i] + ".png";
        });
        _results.push(opt[i].addEventListener("click", function() {
          i = this.value;
          frame_click = true;
          opt_img[i].src = "img/click/" + option[i] + ".png";
          if ((2 <= i && i <= 4)) {
            return that.fade(i);
          } else if ((0 <= i && i <= 1)) {
            return confirm_ok(option[i]);
          }
        }));
      }
      return _results;
    };

    PowerChoose.prototype.timefunc = function(i) {
      this.destory();
      confirmdialog = new ConfirmDialog(option[i]);
      confirmdialog.frame_build();
      document.body.appendChild(confirmdialog.element);
      return confirmdialog.interval(60);
    };

    PowerChoose.prototype.switchToConfirmDialog = function(i) {
      var el, j, time, _i, _len,
        _this = this;
      opt[i].style.backgroundColor = "rgba(255,255,255,0.0)";
      opt[i].style.border = "1px solid rgba(255,255,255,0.0)";
      opt[i].style.borderRadius = null;
      time = 0.5;
      for (j = _i = 0, _len = opt.length; _i < _len; j = ++_i) {
        el = opt[j];
        apply_animation(el, "fade_animation" + j, "" + time + "s");
      }
      return opt[i].addEventListener("webkitAnimationEnd", function() {
        return _this.timefunc(i);
      }, false);
    };

    PowerChoose.prototype.fade = function(i) {
      echo("--------------fade:" + option[i] + "---------------");
      if (power_can(option[i])) {
        echo("power_can true ,power_request");
        return power_request(option[i]);
      } else {
        echo("power_can false ,switchToConfirmDialog");
        return this.switchToConfirmDialog(i);
      }
    };

    PowerChoose.prototype.hover_state = function(i) {
      var j, tmp, _i, _len, _results;
      choose_num = i;
      if (select_state_confirm) {
        this.select_state(i);
      }
      _results = [];
      for (j = _i = 0, _len = opt_img.length; _i < _len; j = ++_i) {
        tmp = opt_img[j];
        if (j === i) {
          _results.push(tmp.src = "img/hover/" + option[i] + ".png");
        } else {
          _results.push(tmp.src = "img/normal/" + option[j] + ".png");
        }
      }
      return _results;
    };

    PowerChoose.prototype.select_state = function(i) {
      var j, tmp, _i, _len, _results;
      select_state_confirm = true;
      choose_num = i;
      _results = [];
      for (j = _i = 0, _len = opt.length; _i < _len; j = ++_i) {
        tmp = opt[j];
        if (j === i) {
          tmp.style.backgroundColor = "rgba(255,255,255,0.1)";
          tmp.style.border = "1px solid rgba(255,255,255,0.15)";
          _results.push(tmp.style.borderRadius = "4px");
        } else {
          tmp.style.backgroundColor = "rgba(255,255,255,0.0)";
          tmp.style.border = "1px solid rgba(255,255,255,0.0)";
          _results.push(tmp.style.borderRadius = null);
        }
      }
      return _results;
    };

    PowerChoose.prototype.keydown = function(keyCode) {
      var i;
      switch (keyCode) {
        case LEFT_ARROW:
          choose_num--;
          if (choose_num === -1) {
            choose_num = 4;
          }
          return this.select_state(choose_num);
        case RIGHT_ARROW:
          choose_num++;
          if (choose_num === 5) {
            choose_num = 0;
          }
          return this.select_state(choose_num);
        case ENTER_KEY:
          i = choose_num;
          if ((2 <= i && i <= 4)) {
            return this.fade(i);
          } else if ((0 <= i && i <= 1)) {
            return confirm_ok(option[i]);
          }
          break;
        case ESC_KEY:
          return destory_all();
      }
    };

    return PowerChoose;

  })(Widget);

  powerchoose = new PowerChoose();

  powerchoose.frame_build();

  document.body.appendChild(powerchoose.element);

  document.body.addEventListener("keydown", function(e) {
    if (powerchoose) {
      return powerchoose.keydown(e.which);
    } else if (confirmdialog) {
      return confirmdialog.keydown(e.which);
    }
  });

  document.body.addEventListener("click", function() {
    if (!frame_click) {
      destory_all();
    }
    return frame_click = false;
  });

}).call(this);
